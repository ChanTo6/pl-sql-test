HTML


<div class="container">
  <div class="products">
      <h2>Available Products</h2>
      <div *ngFor="let product of availableProducts" (click)="addToAddedProducts(product)">
          {{ product.name }}
      </div>
  </div>

  <div class="addedproduct">
      <h2>Added Products</h2>
      <div *ngFor="let product of addedProducts" (click)="removeFromAddedProducts(product)">
          {{ product.name }}
      </div>
  </div>
</div>
<button (click)="sendData()">button</button>

__________________________________________________

APP-COMPONENET

import { Component, OnInit } from '@angular/core';
import { ServiceService } from './service.service'; // Adjust the path based on your service location

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {

  constructor( private service:ServiceService){}

  ngOnInit(): void {

  }

  availableProducts: Product[] = [
      { id: 1, name: 'Product 1' },
      { id: 2, name: 'Product 2' },
      { id: 3, name: 'Product 3' }
  ];

  addedProducts: Product[] = [];

  addToAddedProducts(product: Product) {
      this.addedProducts.push(product);
      const index = this.availableProducts.indexOf(product);
      if (index !== -1) {
          this.availableProducts.splice(index, 1); 
      }
  }

  removeFromAddedProducts(product: Product) {
      this.availableProducts.push(product);
      const index = this.addedProducts.indexOf(product);
      if (index !== -1) {
          this.addedProducts.splice(index, 1);
      }
  }
  sendData() {
    const addedProductsData = this.addedProducts.map(product => ({
      id: product.id,
      name: product.name
    }));
    
    this.service.sendDataToApi(addedProductsData).subscribe(
      (response: any) => {
        console.log('API Response:', response);
      },
      (error: any) => {
     //   console.error('Error:', error);
      }
    );
  }
  

}

interface Product {
  id: number;
  name: string;
}

_______________________________________________________________





import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ServiceService {

  baseApiUrl:string = "https://localhost:7260";

  constructor(private http: HttpClient){
    
  }

  AddQuestions(questions: any): Observable<any> {
    const url = `${this.baseApiUrl}/newParsedAddQuestions`;
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });

    return this.http.post<any>(url, questions, { headers });
  }

  TakeParsedData(): Observable<any> {
    return this.http.get<any[]>(`${this.baseApiUrl}/api/Home/newParsedtakedata`)
  }
  sendDataToApi(data: any[]) {
    console.log(data);
    return this.http.post(`${this.baseApiUrl}/api/Home/Grocery`, data);
  }
}


____________________________________________________


CONTROLLER


   [HttpPost("Grocery")]
   public IActionResult InsertProducts([FromBody] List<Product> products)
   {
       if (products == null || products.Count == 0)
       {
           return BadRequest("No products found in JSON data.");
       }

       try
       {
           // Log received products
           foreach (var product in products)
           {
               Console.WriteLine($"Product received: {product.Name}, {product.Id}");
           }

           // Insert products into Oracle
           package.InsertProducts(products);

           // Return success response
           return Ok("Products inserted successfully.");
       }
       catch (Exception ex)
       {
           // Handle exceptions
           Console.WriteLine("Error: " + ex.Message);
           return StatusCode(500, "Internal server error");
       }
   }


______________________________________________________________



PKG_TO_DO


    public void InsertProducts(List<Product> products)
    {
        foreach(var x in products)
        {
            Console.WriteLine(x.Name);
            Console.WriteLine(x.Id);
        }
        using (OracleConnection conn = new OracleConnection(Connstr))
        {
            conn.Open();
            string jsonData = PrepareProductsJson(products);
            string insertProcedureSql = "SYS.PK_nika_chanturia.INSERT_GROCERY_ITEM"; 
            using (OracleCommand cmd = new OracleCommand(insertProcedureSql, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("p_json_data", OracleDbType.Clob).Value = jsonData;
                cmd.ExecuteNonQuery();
            }
        }
    }

    public string PrepareProductsJson(List<Product> products)
    {
        string jsonData = "[" + string.Join(",", products.Select(p =>
            $"{{ \"id\": {p.Id}, \"name\": \"{p.Name}\" }}")) + "]";
        return jsonData;
    }





  public class Product
  {
      public int Id { get; set; }
      public string Name { get; set; }
  }
___________________________________________________________________




PL/SQL


   PROCEDURE INSERT_GROCERY_ITEM(
    p_json_data IN CLOB
)
IS
    v_id NUMBER;
    v_name VARCHAR2(100); 
BEGIN
    FOR item IN (
        SELECT *
        FROM JSON_TABLE(p_json_data, '$[*]'
            COLUMNS (
                id NUMBER PATH '$.id',
                name VARCHAR2(100) PATH '$.name'
            )
        )
    ) LOOP
        v_id := item.id;
        v_name := item.name;
        
        INSERT INTO NIKA_GROCERYLIST (id, name)
        VALUES (v_id, v_name);
        
        DBMS_OUTPUT.PUT_LINE('Inserted product: ' || v_name);
    END LOOP;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Data inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;  -- Rollback on error
END INSERT_GROCERY_ITEM;
end pk_nika_chanturia;

